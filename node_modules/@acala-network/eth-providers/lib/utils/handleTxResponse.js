"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleTxResponse = exports.decodeMessage = void 0;
const util_1 = require("@polkadot/util");
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
function decodeMessage(reason, code) {
    const reasonString = JSON.stringify(reason).toLowerCase();
    let codeString = `0x${code.substr(138)}`.replace(/0+$/, '');
    // If the codeString is an odd number of characters, add a trailing 0
    if (codeString.length % 2 === 1) {
        codeString += '0';
    }
    return `${reasonString} ${(0, util_1.hexToString)(codeString)}`;
}
exports.decodeMessage = decodeMessage;
function makeError(message, props) {
    const err = new Error(message);
    Object.assign(err, props);
    return err;
}
function handleTxResponse(result, api) {
    return new Promise((resolve, reject) => {
        if (result.status.isFinalized || result.status.isInBlock) {
            const createdFailed = result.findRecord('evm', 'CreatedFailed');
            const executedFailed = result.findRecord('evm', 'ExecutedFailed');
            result.events
                .filter(({ event: { section } }) => section === 'system')
                .forEach((event) => {
                const { event: { data, method } } = event;
                if (method === 'ExtrinsicFailed') {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    const [dispatchError] = data;
                    let message = dispatchError.type;
                    if (dispatchError.isModule) {
                        try {
                            const mod = dispatchError.asModule;
                            const error = api.registry.findMetaError(new Uint8Array([mod.index.toNumber(), mod.error.toNumber()]));
                            message = `${error.section}.${error.name}: ${error.docs}`;
                        }
                        catch (error) {
                            // swallow
                        }
                    }
                    reject(makeError(message, { result }));
                }
                else if (method === 'ExtrinsicSuccess') {
                    const failed = createdFailed || executedFailed;
                    if (failed) {
                        reject(makeError(decodeMessage(failed.event.data[2].toJSON(), failed.event.data[3].toJSON()), {
                            result
                        }));
                    }
                    resolve({ result });
                }
            });
        }
        else if (result.isError) {
            reject({ result });
        }
    });
}
exports.handleTxResponse = handleTxResponse;
//# sourceMappingURL=handleTxResponse.js.map