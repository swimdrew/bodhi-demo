"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TX_RECEIPT_NODES = exports.LOGS_NODES = exports.adaptLogs = exports.getLogsQueryFilter = exports.filterLog = void 0;
/* ---------------------------------------------------------- */
/* --------------- log util for eth_subscribe --------------- */
/* ---------------------------------------------------------- */
// TODO: optimize it to better bloom filter
const filterLog = (log, filter) => {
    const { address: targetAddr, topics: targetTopics } = filter;
    if (targetAddr) {
        if (typeof targetAddr === 'string') {
            if (log.address.toLowerCase() !== targetAddr.toLowerCase())
                return false;
        }
        else if (Array.isArray(targetAddr)) {
            if (!targetAddr.map((x) => x.toLowerCase()).includes(log.address.toLowerCase()))
                return false;
        }
    }
    if (targetTopics?.length > 0) {
        if (!log.topics?.length)
            return false;
        const _targetTopics = targetTopics
            .flat()
            .filter((x) => x)
            .map((x) => x.toLowerCase());
        for (const t of log.topics) {
            if (_targetTopics.includes(t.toLowerCase()))
                return true;
        }
        return false;
    }
    return true;
};
exports.filterLog = filterLog;
/* --------------------------------------------------- */
/* --------------- log utils for Subql --------------- */
/* --------------------------------------------------- */
const isDefined = (x) => x !== undefined && x !== null;
const isAnyDefined = (arr) => arr.some((a) => isDefined(a));
const _getBlockNumberFilter = (fromBlock, toBlock) => {
    const fromBlockFilter = isDefined(fromBlock) ? `greaterThanOrEqualTo: "${fromBlock}"` : '';
    const toBlockFilter = isDefined(toBlock) ? `lessThanOrEqualTo: "${toBlock}"` : '';
    return !!fromBlockFilter || !!toBlockFilter
        ? `blockNumber: {
    ${fromBlockFilter}
    ${toBlockFilter}
  }`
        : '';
};
const _getAddressFilter = (address) => address ? `address: { inInsensitive: ${JSON.stringify(Array.isArray(address) ? address : [address])}}` : '';
const _getTopicsFilter = (topics) => {
    // NOTE: if needed in the future, we can implement actual nested topic filter.
    // Now we just flat all topics
    const allTopics = (topics?.length > 0 ? topics.flat() : []).filter((t) => t);
    return `
    topics: {
      contains: ${JSON.stringify(allTopics)}
    }
  `;
};
const getLogsQueryFilter = (filter) => {
    const { fromBlock, toBlock, address, topics } = filter;
    if (!isAnyDefined([fromBlock, toBlock, address, topics])) {
        return '';
    }
    const addressFilter = _getAddressFilter(address);
    const blockNumberFilter = _getBlockNumberFilter(fromBlock, toBlock);
    const topicsFilter = _getTopicsFilter(topics);
    const queryFilter = `(filter: {
    ${addressFilter}
    ${blockNumberFilter}
    ${topicsFilter}
  })`;
    return queryFilter;
};
exports.getLogsQueryFilter = getLogsQueryFilter;
// adapt logs from graphql to provider compatible types
const adaptLogs = (logs) => logs.map((log) => ({
    ...log,
    data: log.data || ''
}));
exports.adaptLogs = adaptLogs;
exports.LOGS_NODES = `
  nodes {
    blockNumber,
    blockHash,
    transactionIndex,
    removed,
    address,
    data,
    topics,
    transactionHash,
    logIndex,
  }
`;
exports.TX_RECEIPT_NODES = `
  nodes {
    id
    to
    from
    contractAddress
    transactionIndex
    gasUsed
    logsBloom
    blockHash
    transactionHash
    blockNumber
    cumulativeGasUsed
    type
    status
    logs {
      ${exports.LOGS_NODES}
    }
  }
`;
//# sourceMappingURL=logs.js.map