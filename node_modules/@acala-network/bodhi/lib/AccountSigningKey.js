"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AccountSigningKey_keyringPairs, _AccountSigningKey_registry;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountSigningKey = void 0;
const util_crypto_1 = require("@polkadot/util-crypto");
let id = 0;
class AccountSigningKey {
    constructor(registry) {
        _AccountSigningKey_keyringPairs.set(this, void 0);
        _AccountSigningKey_registry.set(this, void 0);
        __classPrivateFieldSet(this, _AccountSigningKey_keyringPairs, [], "f");
        __classPrivateFieldSet(this, _AccountSigningKey_registry, registry, "f");
    }
    async signPayload(payload) {
        const findKeyringPair = __classPrivateFieldGet(this, _AccountSigningKey_keyringPairs, "f").find((pair) => (0, util_crypto_1.addressEq)(pair.address, payload.address));
        if (!findKeyringPair) {
            throw new Error(`Can't find the keyringpair for ${payload.address}`);
        }
        return new Promise((resolve) => {
            const signed = __classPrivateFieldGet(this, _AccountSigningKey_registry, "f")
                .createType('ExtrinsicPayload', payload, { version: payload.version })
                .sign(findKeyringPair);
            resolve({ id: ++id, ...signed });
        });
    }
    addKeyringPair(...keyringPairs) {
        __classPrivateFieldSet(this, _AccountSigningKey_keyringPairs, __classPrivateFieldGet(this, _AccountSigningKey_keyringPairs, "f").concat(...keyringPairs), "f");
    }
}
exports.AccountSigningKey = AccountSigningKey;
_AccountSigningKey_keyringPairs = new WeakMap(), _AccountSigningKey_registry = new WeakMap();
//# sourceMappingURL=AccountSigningKey.js.map