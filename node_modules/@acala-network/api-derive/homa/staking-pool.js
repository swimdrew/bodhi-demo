"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.stakingPool = stakingPool;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _util = require("@polkadot/api-derive/util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function getConstants(api) {
  return {
    defaultExchangeRate: api.consts.stakingPool.defaultExchangeRate,
    bondingDuration: api.consts.polkadotBridge.bondingDuration,
    eraLength: api.consts.polkadotBridge.eraLength,
    stakingCurrency: api.consts.stakingPool.stakingCurrencyId,
    liquidCurrency: api.consts.stakingPool.liquidCurrencyId
  };
}
/**
 * @name stakingPool
 * @description get staking pool information
 */


function stakingPool(instanceId, api) {
  return (0, _util.memo)(instanceId, () => {
    const constants = getConstants(api);
    return (0, _rxjs.combineLatest)([api.query.stakingPool.currentEra(), api.query.stakingPool.stakingPoolLedger(), api.query.stakingPool.stakingPoolParams(), api.query.tokens.totalIssuance(constants.liquidCurrency)]).pipe((0, _operators.map)(result => {
      const [currentEra, ledger, params, liquidIssuance] = result;
      return _objectSpread({
        currentEra,
        ledger,
        params,
        liquidIssuance
      }, constants);
    }));
  });
}