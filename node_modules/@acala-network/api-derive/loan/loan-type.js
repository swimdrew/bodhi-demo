"use strict";

exports.__esModule = true;
exports.allLoanOverviews = allLoanOverviews;
exports.allLoanTypes = allLoanTypes;
exports.loanOverview = loanOverview;
exports.loanType = loanType;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _util = require("@polkadot/api-derive/util");

var _utils = require("../utils");

/**
 * @name loanConstants
 * @description get constants in loan module
 */
function loanConstants(api) {
  return {
    minimumDebitValue: api.consts.cdpEngine.minimumDebitValue,
    defaultDebitExchangeRate: api.consts.cdpEngine.defaultDebitExchangeRate,
    defaultLiquidationRatio: api.consts.cdpEngine.defaultLiquidationRatio,
    defaultLiquidationPenalty: api.consts.cdpEngine.defaultLiquidationPenalty
  };
}
/**
 * @name loanType
 * @description get loan type
 * @param {(AcalaPrimitivesCurrencyCurrencyId | string)} currency
 */


function loanType(instanceId, api) {
  return (0, _util.memo)(instanceId, currency => {
    return (0, _rxjs.combineLatest)([api.query.cdpEngine.debitExchangeRate(currency), api.query.cdpEngine.collateralParams(currency)]).pipe((0, _operators.map)(result => {
      const constants = loanConstants(api);
      const [debitExchangeRate] = result;
      const collateralParams = Reflect.has(result[1], 'unwrapOrDefault') ? result[1].unwrapOrDefault() : result[1];
      return {
        currency,
        debitExchangeRate: debitExchangeRate.isEmpty ? constants.defaultDebitExchangeRate : debitExchangeRate,
        liquidationPenalty: collateralParams.liquidationPenalty.isEmpty ? constants.defaultLiquidationPenalty : collateralParams.liquidationPenalty,
        liquidationRatio: collateralParams.liquidationRatio.isEmpty ? constants.defaultLiquidationRatio : collateralParams.liquidationRatio,
        requiredCollateralRatio: collateralParams.requiredCollateralRatio,
        interestRatePerSec: collateralParams.interestRatePerSec,
        maximumTotalDebitValue: collateralParams.maximumTotalDebitValue,
        minimumDebitValue: constants.minimumDebitValue
      };
    }));
  });
}
/**
 * @name allLoanTypes
 * @description  get loan types of all kinds of collateral
 */


function allLoanTypes(instanceId, api) {
  return (0, _util.memo)(instanceId, () => {
    const loanTypeQuery = loanType(instanceId, api);
    return (0, _utils.getAllCollateralCurrencyIds)(api).pipe((0, _operators.switchMap)(collateralCurrencyIds => {
      return (0, _rxjs.combineLatest)(collateralCurrencyIds.map(currencyId => loanTypeQuery(currencyId)));
    }));
  });
}
/**
 * @name loanOverview
 * @description get loan overview includes total debit, total collateral
 * @param {(CurrencyId | string)} currency
 */


function loanOverview(instanceId, api) {
  return (0, _util.memo)(instanceId, currency => api.query.loans.totalPositions(currency).pipe((0, _operators.map)(result => {
    const {
      collateral,
      debit
    } = result;
    return {
      currency,
      totalDebit: debit,
      totalCollateral: collateral
    };
  })));
}
/**
 * @name allLoanOverview
 * @description get loan overviews of all kinds of collatearl
 */


function allLoanOverviews(instanceId, api) {
  return (0, _util.memo)(instanceId, () => {
    const loanOverViewQuery = loanOverview(instanceId, api);
    return (0, _utils.getAllCollateralCurrencyIds)(api).pipe((0, _operators.switchMap)(collateralCurrencyIds => {
      return (0, _rxjs.combineLatest)(collateralCurrencyIds.map(currencyId => loanOverViewQuery(currencyId)));
    }));
  });
}