"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.pool = pool;

var _operators = require("rxjs/operators");

var _primitives = _interopRequireDefault(require("@acala-network/type-definitions/primitives"));

var _util = require("@polkadot/api-derive/util");

const TOKEN_SORT = _primitives.default.types.TokenSymbol._enum;

function sortTokens(token1, token2) {
  const result = [token1, token2];
  return result.sort((a, b) => TOKEN_SORT[a.asToken.toString()] - TOKEN_SORT[b.asToken.toString()]);
}
/**
 * @name pool
 * @description get liquidity pool of the target currency id
 * @param {CurrencyId} currency target currency id
 */


function pool(instanceId, api) {
  return (0, _util.memo)(instanceId, (token1, token2) => {
    const params = sortTokens(token1, token2);
    return api.query.dex.liquidityPool(params).pipe((0, _operators.map)(result => {
      const [token1Amount, token2Amount] = result;

      if (token1.eq(params[0]) && token2.eq(params[1])) {
        return [token1Amount, token2Amount];
      }

      return [token2Amount, token1Amount];
    }));
  });
}