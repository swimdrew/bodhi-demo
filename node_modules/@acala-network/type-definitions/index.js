"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.typesBundleForPolkadot = exports.typesBundle = exports.typesAlias = exports.types = exports.signedExtensions = exports.rpc = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ormlTypeDefinitions = require("@open-web3/orml-type-definitions");

var _utils = require("@open-web3/orml-type-definitions/utils");

var _accounts = _interopRequireDefault(require("./accounts"));

var _auctionManager = _interopRequireDefault(require("./auctionManager"));

var _cdpEngine = _interopRequireDefault(require("./cdpEngine"));

var _dex = _interopRequireDefault(require("./dex"));

var _evm = _interopRequireDefault(require("./evm"));

var _homa = _interopRequireDefault(require("./homa"));

var _collatorSelection = _interopRequireDefault(require("./collatorSelection"));

var _homaValidatorList = _interopRequireDefault(require("./homaValidatorList"));

var _incentives = _interopRequireDefault(require("./incentives"));

var _loans = _interopRequireDefault(require("./loans"));

var _nft = _interopRequireDefault(require("./nft"));

var _nomineesElection = _interopRequireDefault(require("./nomineesElection"));

var _primitives = _interopRequireDefault(require("./primitives"));

var _renvmBridge = _interopRequireDefault(require("./renvmBridge"));

var _runtime = _interopRequireDefault(require("./runtime"));

var _signedExtensions = require("./signedExtensions");

var _stableAsset = _interopRequireDefault(require("./stableAsset"));

var _stakingPool = _interopRequireDefault(require("./stakingPool"));

var _support = _interopRequireDefault(require("./support"));

var _acala = _interopRequireDefault(require("./spec/acala"));

var _mandala = _interopRequireDefault(require("./spec/mandala"));

var _karura = _interopRequireDefault(require("./spec/karura"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

// FIXME: currently we cannot override this in runtime definations because the code generation script cannot handle overrides
// This will make it behave correctly in runtime, but wrong types in TS defination.
const additionalOverride = {
  Keys: 'SessionKeys1'
};
const acalaDefs = {
  primitives: _primitives.default,
  accounts: _accounts.default,
  auctionManager: _auctionManager.default,
  cdpEngine: _cdpEngine.default,
  collatorSelection: _collatorSelection.default,
  dex: _dex.default,
  evm: _evm.default,
  homa: _homa.default,
  homaValidatorList: _homaValidatorList.default,
  incentives: _incentives.default,
  loans: _loans.default,
  nft: _nft.default,
  nomineesElection: _nomineesElection.default,
  runtime: _runtime.default,
  stakingPool: _stakingPool.default,
  support: _support.default,
  // ecosystem
  renvmBridge: _renvmBridge.default,
  stableAsset: _stableAsset.default
};

const types = _objectSpread(_objectSpread(_objectSpread({}, _ormlTypeDefinitions.types), (0, _utils.typesFromDefs)(acalaDefs)), additionalOverride);

exports.types = types;
const rpc = (0, _utils.jsonrpcFromDefs)(acalaDefs, _objectSpread({}, _ormlTypeDefinitions.rpc));
exports.rpc = rpc;
const typesAlias = (0, _utils.typesAliasFromDefs)(acalaDefs, _objectSpread({}, _ormlTypeDefinitions.typesAlias));
exports.typesAlias = typesAlias;

function getBundle(versioned) {
  return {
    rpc,
    instances: {
      council: ['generalCouncil']
    },
    types: [...versioned].map(version => {
      return {
        minmax: version.minmax,
        types: _objectSpread(_objectSpread({}, types), version.types)
      };
    }),
    alias: typesAlias
  };
}

const typesBundle = {
  spec: {
    acala: getBundle(_acala.default),
    mandala: getBundle(_mandala.default),
    karura: getBundle(_karura.default)
  }
}; // Type overrides have priority issues

exports.typesBundle = typesBundle;
const typesBundleForPolkadot = {
  spec: {
    acala: getBundle(_acala.default),
    mandala: getBundle(_mandala.default),
    karura: getBundle(_karura.default)
  }
};
exports.typesBundleForPolkadot = typesBundleForPolkadot;
const signedExtensions = _signedExtensions.signedExtensions;
exports.signedExtensions = signedExtensions;